---
import Layout from "../../layouts/Layout.astro";
import AuthView from "../../components/auth/AuthView";
import { supabaseClient } from "../../db/supabase.client";

const { slug } = Astro.params;
const currentPath = slug ? `/auth/${slug}` : "/auth/login";

// Handle auth callback for OAuth and email confirmation
if (slug === "callback") {
  try {
    // Get the authorization code from URL parameters
    const url = new URL(Astro.request.url);
    const code = url.searchParams.get("code");
    const error = url.searchParams.get("error");
    const errorDescription = url.searchParams.get("error_description");

    if (error) {
      console.error("Auth callback error:", error, errorDescription);
      return Astro.redirect("/auth/login?error=" + encodeURIComponent(errorDescription || error));
    }

    if (code) {
      // Exchange the code for a session
      const { data, error: sessionError } = await supabaseClient.auth.exchangeCodeForSession(code);

      if (sessionError) {
        console.error("Session exchange error:", sessionError);
        return Astro.redirect("/auth/login?error=" + encodeURIComponent("Authentication failed"));
      }

      if (data.session) {
        // Set session cookies
        const maxAge = 60 * 60 * 24 * 30; // 30 days
        const isLocalhost = Astro.request.url.hostname === 'localhost';

        Astro.cookies.set("sb-access-token", data.session.access_token, {
          httpOnly: true,
          secure: !isLocalhost, // Don't use secure on localhost
          sameSite: isLocalhost ? "lax" : "strict",
          maxAge,
          path: "/"
        });
        Astro.cookies.set("sb-refresh-token", data.session.refresh_token, {
          httpOnly: true,
          secure: !isLocalhost, // Don't use secure on localhost
          sameSite: isLocalhost ? "lax" : "strict",
          maxAge,
          path: "/"
        });

        // Redirect to dashboard
        return Astro.redirect("/dashboard");
      }
    }

    // If no code or session, redirect to login
    return Astro.redirect("/auth/login");
  } catch (error) {
    console.error("Auth callback processing error:", error);
    return Astro.redirect("/auth/login?error=" + encodeURIComponent("Authentication failed"));
  }
}

// Redirect authenticated users to dashboard
const token = Astro.cookies.get("sb-access-token")?.value;
if (token) {
  return Astro.redirect("/dashboard");
}
---

<Layout title="CycleGear - Logowanie">
  <AuthView client:load currentPath={currentPath} />
</Layout>
